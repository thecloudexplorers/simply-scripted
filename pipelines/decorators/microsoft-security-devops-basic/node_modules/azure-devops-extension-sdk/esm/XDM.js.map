{"version":3,"file":"XDM.js","sources":["../../src/XDM.ts"],"sourcesContent":["/**\r\n* Interface for a single XDM channel\r\n*/\r\nexport interface IXDMChannel {\r\n\r\n    /**\r\n    * Invoke a method via RPC. Lookup the registered object on the remote end of the channel and invoke the specified method.\r\n    *\r\n    * @param method - Name of the method to invoke\r\n    * @param instanceId - unique id of the registered object\r\n    * @param params - Arguments to the method to invoke\r\n    * @param instanceContextData - Optional context data to pass to a registered object's factory method\r\n    */\r\n    invokeRemoteMethod<T>(methodName: string, instanceId: string, params?: any[], instanceContextData?: Object): Promise<T>;\r\n\r\n    /**\r\n    * Get a proxied object that represents the object registered with the given instance id on the remote side of this channel.\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    * @param contextData - Optional context data to pass to a registered object's factory method\r\n    */\r\n    getRemoteObjectProxy<T>(instanceId: string, contextData?: Object): Promise<T>;\r\n\r\n    /**\r\n    * Get the object registry to handle messages from this specific channel.\r\n    * Upon receiving a message, this channel registry will be used first, then\r\n    * the global registry will be used if no handler is found here.\r\n    */\r\n    getObjectRegistry(): IXDMObjectRegistry;\r\n}\r\n\r\n/**\r\n* Registry of XDM channels kept per target frame/window\r\n*/\r\nexport interface IXDMChannelManager {\r\n\r\n    /**\r\n    * Add an XDM channel for the given target window/iframe\r\n    *\r\n    * @param window - Target iframe window to communicate with\r\n    * @param targetOrigin - Url of the target iframe (if known)\r\n    */\r\n    addChannel(window: Window, targetOrigin?: string): IXDMChannel;\r\n\r\n    /**\r\n    * Removes an XDM channel, allowing it to be disposed\r\n    *\r\n    * @param channel - The channel to remove from the channel manager\r\n    */\r\n    removeChannel(channel: IXDMChannel): void;\r\n}\r\n\r\n/**\r\n* Registry of XDM objects that can be invoked by an XDM channel\r\n*/\r\nexport interface IXDMObjectRegistry {\r\n\r\n    /**\r\n    * Register an object (instance or factory method) exposed by this frame to callers in a remote frame\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    * @param instance - Either: (1) an object instance, or (2) a function that takes optional context data and returns an object instance.\r\n    */\r\n    register(instanceId: string, instance: Object | { (contextData?: any): Object; }): void;\r\n\r\n    /**\r\n    * Unregister an object (instance or factory method) that was previously registered by this frame\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    */\r\n    unregister(instanceId: string): void;\r\n\r\n    /**\r\n    * Get an instance of an object registered with the given id\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    * @param contextData - Optional context data to pass to the contructor of an object factory method\r\n    */\r\n    getInstance<T>(instanceId: string, contextData?: Object): T | undefined;\r\n}\r\n\r\n\r\n/**\r\n* Settings related to the serialization of data across iframe boundaries.\r\n*/\r\nexport interface ISerializationSettings {\r\n\r\n    /**\r\n    * By default, properties that begin with an underscore are not serialized across\r\n    * the iframe boundary. Set this option to true to serialize such properties.\r\n    */\r\n    includeUnderscoreProperties: boolean;\r\n}\r\n\r\n/**\r\n * Represents a remote procedure call (rpc) between frames.\r\n */\r\nexport interface IJsonRpcMessage {\r\n    id: number;\r\n    instanceId?: string;\r\n    instanceContext?: Object;\r\n    methodName?: string;\r\n    params?: any[];  // if method is present then params should be present\r\n    result?: any;    // method, result, and error are mutucally exclusive.  method is set for requrests, result and error are for responses\r\n    error?: any;\r\n    handshakeToken?: string;\r\n    serializationSettings?: ISerializationSettings;\r\n}\r\n\r\nconst smallestRandom = parseInt(\"10000000000\", 36);\r\nconst maxSafeInteger: number = (<any>Number).MAX_SAFE_INTEGER || 9007199254740991;\r\n\r\n/**\r\n * Create a new random 22-character fingerprint.\r\n * @return string fingerprint\r\n */\r\nfunction newFingerprint() {\r\n    // smallestRandom ensures we will get a 11-character result from the base-36 conversion.\r\n    return Math.floor((Math.random() * (maxSafeInteger - smallestRandom)) + smallestRandom).toString(36) +\r\n        Math.floor((Math.random() * (maxSafeInteger - smallestRandom)) + smallestRandom).toString(36);\r\n}\r\n\r\n/**\r\n * Gets all own and inherited property names of the given object, excluding\r\n * those that are inherited from Object's prototype and \"constructor\".\r\n * @param obj\r\n */\r\nfunction getAllPropertyNames(obj: any) {\r\n    const properties: { [key: string]: true } = {};\r\n    while (obj && obj !== Object.prototype) {\r\n        const ownPropertyNames = Object.getOwnPropertyNames(obj);\r\n        for (const name of ownPropertyNames) {\r\n            if (name !== \"constructor\") {\r\n                properties[name] = true;\r\n            }\r\n        }\r\n        obj = Object.getPrototypeOf(obj);\r\n    }\r\n\r\n    return properties;\r\n}\r\n\r\n/**\r\n * Catalog of objects exposed for XDM\r\n */\r\nexport class XDMObjectRegistry implements IXDMObjectRegistry {\r\n\r\n    private objects: any = {};\r\n\r\n    /**\r\n    * Register an object (instance or factory method) exposed by this frame to callers in a remote frame\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    * @param instance - Either: (1) an object instance, or (2) a function that takes optional context data and returns an object instance.\r\n    */\r\n    public register(instanceId: string, instance: Object | { (contextData?: any): Object; }) {\r\n        this.objects[instanceId] = instance;\r\n    }\r\n\r\n    /**\r\n    * Unregister an object (instance or factory method) that was previously registered by this frame\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    */\r\n    public unregister(instanceId: string) {\r\n        delete this.objects[instanceId];\r\n    }\r\n\r\n    /**\r\n    * Get an instance of an object registered with the given id\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    * @param contextData - Optional context data to pass to a registered object's factory method\r\n    */\r\n    public getInstance<T>(instanceId: string, contextData?: Object): T | undefined {\r\n        var instance = this.objects[instanceId];\r\n        if (!instance) {\r\n            return undefined;\r\n        }\r\n\r\n        if (typeof instance === \"function\") {\r\n            return instance(contextData);\r\n        }\r\n        else {\r\n            return instance;\r\n        }\r\n    }\r\n}\r\n\r\nconst MAX_XDM_DEPTH = 100;\r\nlet nextChannelId = 1;\r\n\r\n/**\r\n * Represents a channel of communication between frames\\document\r\n * Stays \"alive\" across multiple funtion\\method calls\r\n */\r\nexport class XDMChannel implements IXDMChannel {\r\n\r\n    private promises: { [id: number]: { resolve: Function, reject: Function } } = {};\r\n    private postToWindow: Window;\r\n    private targetOrigin: string | undefined;\r\n    private handshakeToken: string | undefined;\r\n    private registry: XDMObjectRegistry;\r\n    private channelId: number;\r\n\r\n    private nextMessageId: number = 1;\r\n    private nextProxyId: number = 1;\r\n    private proxyFunctions: { [name: string]: Function } = {};\r\n\r\n    constructor(postToWindow: Window, targetOrigin?: string) {\r\n\r\n        this.postToWindow = postToWindow;\r\n        this.targetOrigin = targetOrigin;\r\n        this.registry = new XDMObjectRegistry();\r\n        this.channelId = nextChannelId++;\r\n\r\n        if (!this.targetOrigin) {\r\n            this.handshakeToken = newFingerprint();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Get the object registry to handle messages from this specific channel.\r\n    * Upon receiving a message, this channel registry will be used first, then\r\n    * the global registry will be used if no handler is found here.\r\n    */\r\n    public getObjectRegistry(): IXDMObjectRegistry {\r\n        return this.registry;\r\n    }\r\n\r\n    /**\r\n    * Invoke a method via RPC. Lookup the registered object on the remote end of the channel and invoke the specified method.\r\n    *\r\n    * @param method - Name of the method to invoke\r\n    * @param instanceId - unique id of the registered object\r\n    * @param params - Arguments to the method to invoke\r\n    * @param instanceContextData - Optional context data to pass to a registered object's factory method\r\n    * @param serializationSettings - Optional serialization settings\r\n    */\r\n    public async invokeRemoteMethod<T>(methodName: string, instanceId: string, params?: any[], instanceContextData?: Object, serializationSettings?: ISerializationSettings): Promise<T> {\r\n\r\n        const message: IJsonRpcMessage = {\r\n            id: this.nextMessageId++,\r\n            methodName: methodName,\r\n            instanceId: instanceId,\r\n            instanceContext: instanceContextData,\r\n            params: <any[]>this._customSerializeObject(params, serializationSettings),\r\n            serializationSettings: serializationSettings\r\n        };\r\n\r\n        if (!this.targetOrigin) {\r\n            message.handshakeToken = this.handshakeToken;\r\n        }\r\n\r\n        const promise = new Promise<T>((resolve, reject) => {\r\n            this.promises[message.id] = { resolve, reject };\r\n        });\r\n\r\n        this._sendRpcMessage(message);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n    * Get a proxied object that represents the object registered with the given instance id on the remote side of this channel.\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    * @param contextData - Optional context data to pass to a registered object's factory method\r\n    */\r\n    public getRemoteObjectProxy<T>(instanceId: string, contextData?: Object): Promise<T> {\r\n        return this.invokeRemoteMethod(\"\", instanceId, undefined, contextData);\r\n    }\r\n\r\n    private invokeMethod(registeredInstance: any, rpcMessage: IJsonRpcMessage) {\r\n\r\n        if (!rpcMessage.methodName) {\r\n            // Null/empty method name indicates to return the registered object itself.\r\n            this._success(rpcMessage, registeredInstance, rpcMessage.handshakeToken);\r\n            return;\r\n        }\r\n\r\n        var method: Function = registeredInstance[rpcMessage.methodName];\r\n        if (typeof method !== \"function\") {\r\n            this.error(rpcMessage, new Error(\"RPC method not found: \" + rpcMessage.methodName));\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Call specified method.  Add nested success and error call backs with closure\r\n            // so we can post back a response as a result or error as appropriate\r\n            var methodArgs = [];\r\n            if (rpcMessage.params) {\r\n                methodArgs = <any[]>this._customDeserializeObject(rpcMessage.params, {});\r\n            }\r\n\r\n            var result = method.apply(registeredInstance, methodArgs);\r\n            if (result && result.then && typeof result.then === \"function\") {\r\n                result.then((asyncResult: any) => {\r\n                    this._success(rpcMessage, asyncResult, rpcMessage.handshakeToken);\r\n                }, (e: any) => {\r\n                    this.error(rpcMessage, e);\r\n                });\r\n            }\r\n            else {\r\n                this._success(rpcMessage, result, rpcMessage.handshakeToken);\r\n            }\r\n        }\r\n        catch (exception) {\r\n            // send back as error if an exception is thrown\r\n            this.error(rpcMessage, exception as Error);\r\n        }\r\n    }\r\n\r\n    private getRegisteredObject(instanceId: string, instanceContext?: Object): Object | undefined {\r\n\r\n        if (instanceId === \"__proxyFunctions\") {\r\n            // Special case for proxied functions of remote instances\r\n            return this.proxyFunctions;\r\n        }\r\n\r\n        // Look in the channel registry first\r\n        var registeredObject = this.registry.getInstance(instanceId, instanceContext);\r\n        if (!registeredObject) {\r\n            // Look in the global registry as a fallback\r\n            registeredObject = globalObjectRegistry.getInstance(instanceId, instanceContext);\r\n        }\r\n\r\n        return registeredObject as Object;\r\n    }\r\n\r\n    /**\r\n    * Handle a received message on this channel. Dispatch to the appropriate object found via object registry\r\n    *\r\n    * @param rpcMessage - Message data\r\n    * @return True if the message was handled by this channel. Otherwise false.\r\n    */\r\n    public onMessage(rpcMessage: IJsonRpcMessage): boolean {\r\n\r\n        if (rpcMessage.instanceId) {\r\n            // Find the object that handles this requestNeed to find implementation\r\n\r\n            // Look in the channel registry first\r\n            const registeredObject: any = this.getRegisteredObject(rpcMessage.instanceId, rpcMessage.instanceContext);\r\n            if (!registeredObject) {\r\n                // If not found return false to indicate that the message was not handled\r\n                return false;\r\n            }\r\n\r\n            if (typeof registeredObject[\"then\"] === \"function\") {\r\n                (<Promise<any>>registeredObject).then((resolvedInstance) => {\r\n                    this.invokeMethod(resolvedInstance, rpcMessage);\r\n                }, (e) => {\r\n                    this.error(rpcMessage, e);\r\n                });\r\n            }\r\n            else {\r\n                this.invokeMethod(registeredObject, rpcMessage);\r\n            }\r\n        }\r\n        else {\r\n            const promise = this.promises[rpcMessage.id];\r\n            if (!promise) {\r\n                // Message not handled by this channel.\r\n                return false;\r\n            }\r\n\r\n            if (rpcMessage.error) {\r\n                promise.reject(this._customDeserializeObject([rpcMessage.error], {})[0]);\r\n            }\r\n            else {\r\n                promise.resolve(this._customDeserializeObject([rpcMessage.result], {})[0]);\r\n            }\r\n\r\n            delete this.promises[rpcMessage.id];\r\n        }\r\n\r\n        // Message handled by this channel\r\n        return true;\r\n    }\r\n\r\n    public owns(source: Window, origin: string, rpcMessage: IJsonRpcMessage): boolean {\r\n        /// Determines whether the current message belongs to this channel or not\r\n        if (this.postToWindow === source) {\r\n            // For messages coming from sandboxed iframes the origin will be set to the string \"null\".  This is \r\n            // how onprem works.  If it is not a sandboxed iFrame we will get the origin as expected.\r\n            if (this.targetOrigin) {\r\n                if (origin) {\r\n                    return origin.toLowerCase() === \"null\" || this.targetOrigin.toLowerCase().indexOf(origin.toLowerCase()) === 0;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (rpcMessage.handshakeToken && rpcMessage.handshakeToken === this.handshakeToken) {\r\n                    this.targetOrigin = origin;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public error(messageObj: IJsonRpcMessage, errorObj: Error) {\r\n        this._sendRpcMessage({\r\n            id: messageObj.id,\r\n            error: this._customSerializeObject([errorObj], messageObj.serializationSettings)[0],\r\n            handshakeToken: messageObj.handshakeToken\r\n        });\r\n    }\r\n\r\n    private _success(messageObj: IJsonRpcMessage, result: any, handshakeToken?: string) {\r\n        this._sendRpcMessage({\r\n            id: messageObj.id,\r\n            result: this._customSerializeObject([result], messageObj.serializationSettings)[0],\r\n            handshakeToken\r\n        });\r\n    }\r\n\r\n    private _sendRpcMessage(message: IJsonRpcMessage) {\r\n        this.postToWindow.postMessage(JSON.stringify(message), \"*\");\r\n    }\r\n\r\n    private _customSerializeObject(obj: Object | undefined, settings: ISerializationSettings | undefined, prevParentObjects?: { originalObjects: any[]; newObjects: any[]; }, nextCircularRefId: number = 1, depth: number = 1): any | undefined {\r\n\r\n        if (!obj || depth > MAX_XDM_DEPTH) {\r\n            return undefined;\r\n        }\r\n\r\n        if (obj instanceof Node || obj instanceof Window || obj instanceof Event) {\r\n            return undefined;\r\n        }\r\n\r\n        var returnValue: any;\r\n\r\n        let parentObjects: { originalObjects: any[]; newObjects: any[]; };\r\n        if (!prevParentObjects) {\r\n            parentObjects = {\r\n                newObjects: [],\r\n                originalObjects: []\r\n            };\r\n        }\r\n        else {\r\n            parentObjects = prevParentObjects;\r\n        }\r\n\r\n        parentObjects.originalObjects.push(obj);\r\n\r\n        var serializeMember = (parentObject: any, newObject: any, key: any) => {\r\n            var item;\r\n\r\n            try {\r\n                item = parentObject[key];\r\n            }\r\n            catch (ex) {\r\n                // Cannot access this property. Skip its serialization.\r\n            }\r\n\r\n            var itemType = typeof item;\r\n            if (itemType === \"undefined\") {\r\n                return;\r\n            }\r\n\r\n            // Check for a circular reference by looking at parent objects\r\n            var parentItemIndex = -1;\r\n            if (itemType === \"object\") {\r\n                parentItemIndex = parentObjects.originalObjects.indexOf(item);\r\n            }\r\n            if (parentItemIndex >= 0) {\r\n                // Circular reference found. Add reference to parent\r\n                var parentItem = parentObjects.newObjects[parentItemIndex];\r\n                if (!parentItem.__circularReferenceId) {\r\n                    parentItem.__circularReferenceId = nextCircularRefId++;\r\n                }\r\n                newObject[key] = {\r\n                    __circularReference: parentItem.__circularReferenceId\r\n                };\r\n            }\r\n            else {\r\n                if (itemType === \"function\") {\r\n                    var proxyFunctionId = this.nextProxyId++;\r\n                    newObject[key] = {\r\n                        __proxyFunctionId: this._registerProxyFunction(item, obj),\r\n                        _channelId: this.channelId\r\n                    };\r\n                }\r\n                else if (itemType === \"object\") {\r\n                    if (item && item instanceof Date) {\r\n                        newObject[key] = {\r\n                            __proxyDate: item.getTime()\r\n                        };\r\n                    }\r\n                    else {\r\n                        newObject[key] = this._customSerializeObject(item, settings, parentObjects, nextCircularRefId, depth + 1);\r\n                    }\r\n                }\r\n                else if (key !== \"__proxyFunctionId\") {\r\n                    // Just add non object/function properties as-is. Don't include \"__proxyFunctionId\" to protect\r\n                    // our proxy methods from being invoked from other messages.\r\n                    newObject[key] = item;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (obj instanceof Array) {\r\n\r\n            returnValue = [];\r\n            parentObjects.newObjects.push(returnValue);\r\n\r\n            for (var i = 0, l = obj.length; i < l; i++) {\r\n                serializeMember(obj, returnValue, i);\r\n            }\r\n        }\r\n        else {\r\n            returnValue = {};\r\n            parentObjects.newObjects.push(returnValue);\r\n\r\n            let keys: { [key: string]: true } = {};\r\n            try {\r\n                keys = getAllPropertyNames(obj);\r\n            } catch (ex) {\r\n                // We may not be able to access the iterator of this object. Skip its serialization.\r\n            }\r\n\r\n            for (var key in keys) {\r\n                // Don't serialize properties that start with an underscore.\r\n                if ((key && key[0] !== \"_\") || (settings && settings.includeUnderscoreProperties)) {\r\n                    serializeMember(obj, returnValue, key);\r\n                }\r\n            }\r\n        }\r\n\r\n        parentObjects.originalObjects.pop();\r\n        parentObjects.newObjects.pop();\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    private _registerProxyFunction(func: Function, context: any): number {\r\n        var proxyFunctionId = this.nextProxyId++;\r\n        this.proxyFunctions[\"proxy\" + proxyFunctionId] = function () {\r\n            return func.apply(context, Array.prototype.slice.call(arguments, 0));\r\n        };\r\n        return proxyFunctionId;\r\n    }\r\n\r\n    private _customDeserializeObject(obj: Object, circularRefs: { [key: number]: Object }): any {\r\n        var that = this;\r\n\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n\r\n        var deserializeMember = (parentObject: any, key: any) => {\r\n            var item = parentObject[key];\r\n            var itemType = typeof item;\r\n\r\n            if (key === \"__circularReferenceId\" && itemType === 'number') {\r\n                circularRefs[item] = parentObject;\r\n                delete parentObject[key];\r\n            }\r\n            else if (itemType === \"object\" && item) {\r\n\r\n                if (item.__proxyFunctionId) {\r\n                    parentObject[key] = function () {\r\n                        return that.invokeRemoteMethod(\"proxy\" + item.__proxyFunctionId, \"__proxyFunctions\", Array.prototype.slice.call(arguments, 0), {}, { includeUnderscoreProperties: true });\r\n                    }\r\n                }\r\n                else if (item.__proxyDate) {\r\n                    parentObject[key] = new Date(item.__proxyDate);\r\n                }\r\n                else if (item.__circularReference) {\r\n                    parentObject[key] = circularRefs[item.__circularReference];\r\n                }\r\n                else {\r\n                    this._customDeserializeObject(item, circularRefs);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (obj instanceof Array) {\r\n            for (var i = 0, l = obj.length; i < l; i++) {\r\n                deserializeMember(obj, i);\r\n            }\r\n        }\r\n        else if (typeof obj === \"object\") {\r\n            for (var key in obj) {\r\n                deserializeMember(obj, key);\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n* Registry of XDM channels kept per target frame/window\r\n*/\r\nclass XDMChannelManager implements IXDMChannelManager {\r\n\r\n    private _channels: XDMChannel[] = [];\r\n\r\n    constructor() {\r\n        window.addEventListener(\"message\", this._handleMessageReceived);\r\n    }\r\n\r\n    /**\r\n    * Add an XDM channel for the given target window/iframe\r\n    *\r\n    * @param window - Target iframe window to communicate with\r\n    * @param targetOrigin - Url of the target iframe (if known)\r\n    */\r\n    public addChannel(window: Window, targetOrigin?: string): IXDMChannel {\r\n        const channel = new XDMChannel(window, targetOrigin);\r\n        this._channels.push(channel);\r\n        return channel;\r\n    }\r\n\r\n    public removeChannel(channel: IXDMChannel) {\r\n        this._channels = this._channels.filter(c => c !== channel);\r\n    }\r\n\r\n    private _handleMessageReceived = (event: any) => {\r\n        // get channel and dispatch to it\r\n        let rpcMessage: IJsonRpcMessage | undefined;\r\n\r\n        if (typeof event.data === \"string\") {\r\n            try {\r\n                rpcMessage = JSON.parse(event.data);\r\n            }\r\n            catch (error) {\r\n                // The message is not a valid JSON string. Not one of our events.\r\n            }\r\n        }\r\n\r\n        if (rpcMessage) {\r\n            let handled = false;\r\n            let channelOwner: XDMChannel | undefined;\r\n\r\n            for (const channel of this._channels) {\r\n                if (channel.owns(event.source, event.origin, rpcMessage)) {\r\n                    // keep a reference to the channel owner found. \r\n                    channelOwner = channel;\r\n                    handled = channel.onMessage(rpcMessage) || handled;\r\n                }\r\n            }\r\n\r\n            if (channelOwner && !handled) {\r\n                if (window.console) {\r\n                    console.error(`No handler found on any channel for message: ${JSON.stringify(rpcMessage)}`);\r\n                }\r\n\r\n                // for instance based proxies, send an error on the channel owning the message to resolve any control creation promises\r\n                // on the host frame. \r\n                if (rpcMessage.instanceId) {\r\n                    channelOwner.error(rpcMessage, new Error(`The registered object ${rpcMessage.instanceId} could not be found.`));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* The registry of global XDM handlers\r\n*/\r\nexport const globalObjectRegistry: IXDMObjectRegistry = new XDMObjectRegistry();\r\n\r\n/**\r\n* Manages XDM channels per target window/frame\r\n*/\r\nexport const channelManager: IXDMChannelManager = new XDMChannelManager();"],"names":[],"mappings":"AA6GA,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;AACnD,MAAM,cAAc,GAAiB,MAAO,CAAC,gBAAgB,IAAI,gBAAgB,CAAC;AAElF;;;AAGG;AACH,SAAS,cAAc,GAAA;;IAEnB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,cAAc,GAAG,cAAc,CAAC,IAAI,cAAc,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;QAChG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,cAAc,GAAG,cAAc,CAAC,IAAI,cAAc,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACtG,CAAC;AAED;;;;AAIG;AACH,SAAS,mBAAmB,CAAC,GAAQ,EAAA;IACjC,MAAM,UAAU,GAA4B,EAAE,CAAC;AAC/C,IAAA,OAAO,GAAG,IAAI,GAAG,KAAK,MAAM,CAAC,SAAS,EAAE;QACpC,MAAM,gBAAgB,GAAG,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;AACzD,QAAA,KAAK,MAAM,IAAI,IAAI,gBAAgB,EAAE;YACjC,IAAI,IAAI,KAAK,aAAa,EAAE;AACxB,gBAAA,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;AAC3B,aAAA;AACJ,SAAA;AACD,QAAA,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AACpC,KAAA;AAED,IAAA,OAAO,UAAU,CAAC;AACtB,CAAC;AAED;;AAEG;MACU,iBAAiB,CAAA;IAElB,OAAO,GAAQ,EAAE,CAAC;AAE1B;;;;;AAKE;IACK,QAAQ,CAAC,UAAkB,EAAE,QAAmD,EAAA;AACnF,QAAA,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;KACvC;AAED;;;;AAIE;AACK,IAAA,UAAU,CAAC,UAAkB,EAAA;AAChC,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;KACnC;AAED;;;;;AAKE;IACK,WAAW,CAAI,UAAkB,EAAE,WAAoB,EAAA;QAC1D,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACxC,IAAI,CAAC,QAAQ,EAAE;AACX,YAAA,OAAO,SAAS,CAAC;AACpB,SAAA;AAED,QAAA,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAChC,YAAA,OAAO,QAAQ,CAAC,WAAW,CAAC,CAAC;AAChC,SAAA;AACI,aAAA;AACD,YAAA,OAAO,QAAQ,CAAC;AACnB,SAAA;KACJ;AACJ,CAAA;AAED,MAAM,aAAa,GAAG,GAAG,CAAC;AAC1B,IAAI,aAAa,GAAG,CAAC,CAAC;AAEtB;;;AAGG;MACU,UAAU,CAAA;IAEX,QAAQ,GAA8D,EAAE,CAAC;AACzE,IAAA,YAAY,CAAS;AACrB,IAAA,YAAY,CAAqB;AACjC,IAAA,cAAc,CAAqB;AACnC,IAAA,QAAQ,CAAoB;AAC5B,IAAA,SAAS,CAAS;IAElB,aAAa,GAAW,CAAC,CAAC;IAC1B,WAAW,GAAW,CAAC,CAAC;IACxB,cAAc,GAAiC,EAAE,CAAC;IAE1D,WAAY,CAAA,YAAoB,EAAE,YAAqB,EAAA;AAEnD,QAAA,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;AACjC,QAAA,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;AACjC,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,iBAAiB,EAAE,CAAC;AACxC,QAAA,IAAI,CAAC,SAAS,GAAG,aAAa,EAAE,CAAC;AAEjC,QAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;AACpB,YAAA,IAAI,CAAC,cAAc,GAAG,cAAc,EAAE,CAAC;AAC1C,SAAA;KACJ;AAED;;;;AAIE;IACK,iBAAiB,GAAA;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC;KACxB;AAED;;;;;;;;AAQE;IACK,MAAM,kBAAkB,CAAI,UAAkB,EAAE,UAAkB,EAAE,MAAc,EAAE,mBAA4B,EAAE,qBAA8C,EAAA;AAEnK,QAAA,MAAM,OAAO,GAAoB;AAC7B,YAAA,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE;AACxB,YAAA,UAAU,EAAE,UAAU;AACtB,YAAA,UAAU,EAAE,UAAU;AACtB,YAAA,eAAe,EAAE,mBAAmB;YACpC,MAAM,EAAS,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,qBAAqB,CAAC;AACzE,YAAA,qBAAqB,EAAE,qBAAqB;SAC/C,CAAC;AAEF,QAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;AACpB,YAAA,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AAChD,SAAA;QAED,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,KAAI;AAC/C,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AACpD,SAAC,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAE9B,QAAA,OAAO,OAAO,CAAC;KAClB;AAED;;;;;AAKE;IACK,oBAAoB,CAAI,UAAkB,EAAE,WAAoB,EAAA;AACnE,QAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;KAC1E;IAEO,YAAY,CAAC,kBAAuB,EAAE,UAA2B,EAAA;AAErE,QAAA,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;;YAExB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,kBAAkB,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;YACzE,OAAO;AACV,SAAA;QAED,IAAI,MAAM,GAAa,kBAAkB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AACjE,QAAA,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;AAC9B,YAAA,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,KAAK,CAAC,wBAAwB,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YACpF,OAAO;AACV,SAAA;QAED,IAAI;;;YAGA,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,UAAU,CAAC,MAAM,EAAE;gBACnB,UAAU,GAAU,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAC5E,aAAA;YAED,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;AAC1D,YAAA,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;AAC5D,gBAAA,MAAM,CAAC,IAAI,CAAC,CAAC,WAAgB,KAAI;oBAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;AACtE,iBAAC,EAAE,CAAC,CAAM,KAAI;AACV,oBAAA,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;AAC9B,iBAAC,CAAC,CAAC;AACN,aAAA;AACI,iBAAA;gBACD,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;AAChE,aAAA;AACJ,SAAA;AACD,QAAA,OAAO,SAAS,EAAE;;AAEd,YAAA,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,SAAkB,CAAC,CAAC;AAC9C,SAAA;KACJ;IAEO,mBAAmB,CAAC,UAAkB,EAAE,eAAwB,EAAA;QAEpE,IAAI,UAAU,KAAK,kBAAkB,EAAE;;YAEnC,OAAO,IAAI,CAAC,cAAc,CAAC;AAC9B,SAAA;;AAGD,QAAA,IAAI,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;QAC9E,IAAI,CAAC,gBAAgB,EAAE;;YAEnB,gBAAgB,GAAG,oBAAoB,CAAC,WAAW,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;AACpF,SAAA;AAED,QAAA,OAAO,gBAA0B,CAAC;KACrC;AAED;;;;;AAKE;AACK,IAAA,SAAS,CAAC,UAA2B,EAAA;QAExC,IAAI,UAAU,CAAC,UAAU,EAAE;;;AAIvB,YAAA,MAAM,gBAAgB,GAAQ,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,eAAe,CAAC,CAAC;YAC1G,IAAI,CAAC,gBAAgB,EAAE;;AAEnB,gBAAA,OAAO,KAAK,CAAC;AAChB,aAAA;AAED,YAAA,IAAI,OAAO,gBAAgB,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE;AACjC,gBAAA,gBAAiB,CAAC,IAAI,CAAC,CAAC,gBAAgB,KAAI;AACvD,oBAAA,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;AACpD,iBAAC,EAAE,CAAC,CAAC,KAAI;AACL,oBAAA,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;AAC9B,iBAAC,CAAC,CAAC;AACN,aAAA;AACI,iBAAA;AACD,gBAAA,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;AACnD,aAAA;AACJ,SAAA;AACI,aAAA;YACD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC7C,IAAI,CAAC,OAAO,EAAE;;AAEV,gBAAA,OAAO,KAAK,CAAC;AAChB,aAAA;YAED,IAAI,UAAU,CAAC,KAAK,EAAE;AAClB,gBAAA,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E,aAAA;AACI,iBAAA;AACD,gBAAA,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9E,aAAA;YAED,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;AACvC,SAAA;;AAGD,QAAA,OAAO,IAAI,CAAC;KACf;AAEM,IAAA,IAAI,CAAC,MAAc,EAAE,MAAc,EAAE,UAA2B,EAAA;;AAEnE,QAAA,IAAI,IAAI,CAAC,YAAY,KAAK,MAAM,EAAE;;;YAG9B,IAAI,IAAI,CAAC,YAAY,EAAE;AACnB,gBAAA,IAAI,MAAM,EAAE;oBACR,OAAO,MAAM,CAAC,WAAW,EAAE,KAAK,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC;AACjH,iBAAA;AAAM,qBAAA;AACH,oBAAA,OAAO,KAAK,CAAC;AAChB,iBAAA;AACJ,aAAA;AACI,iBAAA;gBACD,IAAI,UAAU,CAAC,cAAc,IAAI,UAAU,CAAC,cAAc,KAAK,IAAI,CAAC,cAAc,EAAE;AAChF,oBAAA,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;AAC3B,oBAAA,OAAO,IAAI,CAAC;AACf,iBAAA;AACJ,aAAA;AACJ,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;KAChB;IAEM,KAAK,CAAC,UAA2B,EAAE,QAAe,EAAA;QACrD,IAAI,CAAC,eAAe,CAAC;YACjB,EAAE,EAAE,UAAU,CAAC,EAAE;AACjB,YAAA,KAAK,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC,QAAQ,CAAC,EAAE,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YACnF,cAAc,EAAE,UAAU,CAAC,cAAc;AAC5C,SAAA,CAAC,CAAC;KACN;AAEO,IAAA,QAAQ,CAAC,UAA2B,EAAE,MAAW,EAAE,cAAuB,EAAA;QAC9E,IAAI,CAAC,eAAe,CAAC;YACjB,EAAE,EAAE,UAAU,CAAC,EAAE;AACjB,YAAA,MAAM,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC,MAAM,CAAC,EAAE,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAClF,cAAc;AACjB,SAAA,CAAC,CAAC;KACN;AAEO,IAAA,eAAe,CAAC,OAAwB,EAAA;AAC5C,QAAA,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;KAC/D;IAEO,sBAAsB,CAAC,GAAuB,EAAE,QAA4C,EAAE,iBAAkE,EAAE,iBAA4B,GAAA,CAAC,EAAE,KAAA,GAAgB,CAAC,EAAA;AAEtN,QAAA,IAAI,CAAC,GAAG,IAAI,KAAK,GAAG,aAAa,EAAE;AAC/B,YAAA,OAAO,SAAS,CAAC;AACpB,SAAA;QAED,IAAI,GAAG,YAAY,IAAI,IAAI,GAAG,YAAY,MAAM,IAAI,GAAG,YAAY,KAAK,EAAE;AACtE,YAAA,OAAO,SAAS,CAAC;AACpB,SAAA;AAED,QAAA,IAAI,WAAgB,CAAC;AAErB,QAAA,IAAI,aAA6D,CAAC;QAClE,IAAI,CAAC,iBAAiB,EAAE;AACpB,YAAA,aAAa,GAAG;AACZ,gBAAA,UAAU,EAAE,EAAE;AACd,gBAAA,eAAe,EAAE,EAAE;aACtB,CAAC;AACL,SAAA;AACI,aAAA;YACD,aAAa,GAAG,iBAAiB,CAAC;AACrC,SAAA;AAED,QAAA,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAExC,IAAI,eAAe,GAAG,CAAC,YAAiB,EAAE,SAAc,EAAE,GAAQ,KAAI;AAClE,YAAA,IAAI,IAAI,CAAC;YAET,IAAI;AACA,gBAAA,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;AAC5B,aAAA;AACD,YAAA,OAAO,EAAE,EAAE;;AAEV,aAAA;AAED,YAAA,IAAI,QAAQ,GAAG,OAAO,IAAI,CAAC;YAC3B,IAAI,QAAQ,KAAK,WAAW,EAAE;gBAC1B,OAAO;AACV,aAAA;;AAGD,YAAA,IAAI,eAAe,GAAG,CAAC,CAAC,CAAC;YACzB,IAAI,QAAQ,KAAK,QAAQ,EAAE;gBACvB,eAAe,GAAG,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjE,aAAA;YACD,IAAI,eAAe,IAAI,CAAC,EAAE;;gBAEtB,IAAI,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;AAC3D,gBAAA,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE;AACnC,oBAAA,UAAU,CAAC,qBAAqB,GAAG,iBAAiB,EAAE,CAAC;AAC1D,iBAAA;gBACD,SAAS,CAAC,GAAG,CAAC,GAAG;oBACb,mBAAmB,EAAE,UAAU,CAAC,qBAAqB;iBACxD,CAAC;AACL,aAAA;AACI,iBAAA;gBACD,IAAI,QAAQ,KAAK,UAAU,EAAE;AACzB,oBAAsB,IAAI,CAAC,WAAW,GAAG;oBACzC,SAAS,CAAC,GAAG,CAAC,GAAG;wBACb,iBAAiB,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,GAAG,CAAC;wBACzD,UAAU,EAAE,IAAI,CAAC,SAAS;qBAC7B,CAAC;AACL,iBAAA;qBACI,IAAI,QAAQ,KAAK,QAAQ,EAAE;AAC5B,oBAAA,IAAI,IAAI,IAAI,IAAI,YAAY,IAAI,EAAE;wBAC9B,SAAS,CAAC,GAAG,CAAC,GAAG;AACb,4BAAA,WAAW,EAAE,IAAI,CAAC,OAAO,EAAE;yBAC9B,CAAC;AACL,qBAAA;AACI,yBAAA;wBACD,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,EAAE,iBAAiB,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;AAC7G,qBAAA;AACJ,iBAAA;qBACI,IAAI,GAAG,KAAK,mBAAmB,EAAE;;;AAGlC,oBAAA,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AACzB,iBAAA;AACJ,aAAA;AACL,SAAC,CAAC;QAEF,IAAI,GAAG,YAAY,KAAK,EAAE;YAEtB,WAAW,GAAG,EAAE,CAAC;AACjB,YAAA,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAE3C,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACxC,gBAAA,eAAe,CAAC,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;AACxC,aAAA;AACJ,SAAA;AACI,aAAA;YACD,WAAW,GAAG,EAAE,CAAC;AACjB,YAAA,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAE3C,IAAI,IAAI,GAA4B,EAAE,CAAC;YACvC,IAAI;AACA,gBAAA,IAAI,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;AACnC,aAAA;AAAC,YAAA,OAAO,EAAE,EAAE;;AAEZ,aAAA;AAED,YAAA,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;;AAElB,gBAAA,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,QAAQ,IAAI,QAAQ,CAAC,2BAA2B,CAAC,EAAE;AAC/E,oBAAA,eAAe,CAAC,GAAG,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;AAC1C,iBAAA;AACJ,aAAA;AACJ,SAAA;AAED,QAAA,aAAa,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;AACpC,QAAA,aAAa,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;AAE/B,QAAA,OAAO,WAAW,CAAC;KACtB;IAEO,sBAAsB,CAAC,IAAc,EAAE,OAAY,EAAA;AACvD,QAAA,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AACzC,QAAA,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,eAAe,CAAC,GAAG,YAAA;AAC7C,YAAA,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;AACzE,SAAC,CAAC;AACF,QAAA,OAAO,eAAe,CAAC;KAC1B;IAEO,wBAAwB,CAAC,GAAW,EAAE,YAAuC,EAAA;QACjF,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,CAAC,GAAG,EAAE;AACN,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AAED,QAAA,IAAI,iBAAiB,GAAG,CAAC,YAAiB,EAAE,GAAQ,KAAI;AACpD,YAAA,IAAI,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;AAC7B,YAAA,IAAI,QAAQ,GAAG,OAAO,IAAI,CAAC;AAE3B,YAAA,IAAI,GAAG,KAAK,uBAAuB,IAAI,QAAQ,KAAK,QAAQ,EAAE;AAC1D,gBAAA,YAAY,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;AAClC,gBAAA,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;AAC5B,aAAA;AACI,iBAAA,IAAI,QAAQ,KAAK,QAAQ,IAAI,IAAI,EAAE;gBAEpC,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBACxB,YAAY,CAAC,GAAG,CAAC,GAAG,YAAA;AAChB,wBAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,2BAA2B,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9K,qBAAC,CAAA;AACJ,iBAAA;qBACI,IAAI,IAAI,CAAC,WAAW,EAAE;oBACvB,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAClD,iBAAA;qBACI,IAAI,IAAI,CAAC,mBAAmB,EAAE;oBAC/B,YAAY,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAC9D,iBAAA;AACI,qBAAA;AACD,oBAAA,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AACrD,iBAAA;AACJ,aAAA;AACL,SAAC,CAAC;QAEF,IAAI,GAAG,YAAY,KAAK,EAAE;AACtB,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACxC,gBAAA,iBAAiB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAC7B,aAAA;AACJ,SAAA;AACI,aAAA,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAC9B,YAAA,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AACjB,gBAAA,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC/B,aAAA;AACJ,SAAA;AAED,QAAA,OAAO,GAAG,CAAC;KACd;AACJ,CAAA;AAED;;AAEE;AACF,MAAM,iBAAiB,CAAA;IAEX,SAAS,GAAiB,EAAE,CAAC;AAErC,IAAA,WAAA,GAAA;QACI,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;KACnE;AAED;;;;;AAKE;IACK,UAAU,CAAC,MAAc,EAAE,YAAqB,EAAA;QACnD,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AACrD,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC7B,QAAA,OAAO,OAAO,CAAC;KAClB;AAEM,IAAA,aAAa,CAAC,OAAoB,EAAA;AACrC,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,OAAO,CAAC,CAAC;KAC9D;AAEO,IAAA,sBAAsB,GAAG,CAAC,KAAU,KAAI;;AAE5C,QAAA,IAAI,UAAuC,CAAC;AAE5C,QAAA,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;YAChC,IAAI;gBACA,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACvC,aAAA;AACD,YAAA,OAAO,KAAK,EAAE;;AAEb,aAAA;AACJ,SAAA;AAED,QAAA,IAAI,UAAU,EAAE;YACZ,IAAI,OAAO,GAAG,KAAK,CAAC;AACpB,YAAA,IAAI,YAAoC,CAAC;AAEzC,YAAA,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE;AAClC,gBAAA,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;;oBAEtD,YAAY,GAAG,OAAO,CAAC;oBACvB,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC;AACtD,iBAAA;AACJ,aAAA;AAED,YAAA,IAAI,YAAY,IAAI,CAAC,OAAO,EAAE;gBAC1B,IAAI,MAAM,CAAC,OAAO,EAAE;AAChB,oBAAA,OAAO,CAAC,KAAK,CAAC,CAAA,6CAAA,EAAgD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAE,CAAA,CAAC,CAAC;AAC/F,iBAAA;;;gBAID,IAAI,UAAU,CAAC,UAAU,EAAE;AACvB,oBAAA,YAAY,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,KAAK,CAAC,CAAA,sBAAA,EAAyB,UAAU,CAAC,UAAU,CAAsB,oBAAA,CAAA,CAAC,CAAC,CAAC;AACnH,iBAAA;AACJ,aAAA;AACJ,SAAA;AACL,KAAC,CAAA;AACJ,CAAA;AAED;;AAEE;AACW,MAAA,oBAAoB,GAAuB,IAAI,iBAAiB,GAAG;AAEhF;;AAEE;AACW,MAAA,cAAc,GAAuB,IAAI,iBAAiB;;;;"}